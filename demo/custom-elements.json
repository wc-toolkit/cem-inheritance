{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "demo/src/my-components.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base component",
          "name": "MyComponent",
          "cssProperties": [
            {
              "description": "The color of the component",
              "name": "--my-component-color"
            },
            {
              "description": "The background color of the component",
              "name": "--my-component-background-color"
            }
          ],
          "cssParts": [
            {
              "description": "The title of the component",
              "name": "title"
            },
            {
              "description": "The content of the component",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The title of the component",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "age",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "hobby",
              "type": {
                "text": "\"sports\" | \"music\" | \"art\""
              }
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "events": [
            {
              "description": "My event",
              "name": "my-event"
            }
          ],
          "cssStates": [
            {
              "description": "The active state of the component",
              "name": "active"
            },
            {
              "description": "The disabled state of the component",
              "name": "disabled"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "my-component",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Basic component that extends another component",
          "name": "MyExtComponent",
          "superclass": {
            "name": "MyComponent",
            "module": "demo/src/my-components.ts"
          },
          "tagName": "my-ext-component",
          "customElement": true,
          "slots": [
            {
              "description": "The title of the component",
              "name": "",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The title of the component",
              "name": "title",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "description": "The content of the component",
              "name": "content",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssProperties": [
            {
              "description": "The color of the component",
              "name": "--my-component-color",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "description": "The background color of the component",
              "name": "--my-component-background-color",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "age",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "hobby",
              "type": {
                "text": "\"sports\" | \"music\" | \"art\""
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "events": [
            {
              "description": "My event",
              "name": "my-event",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "The active state of the component",
              "name": "active",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "description": "The disabled state of the component",
              "name": "disabled",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "attributes": []
        },
        {
          "kind": "class",
          "description": "Component where items are omitted from the CEM config",
          "name": "MyConfigOmitComponent",
          "superclass": {
            "name": "MyComponent",
            "module": "demo/src/my-components.ts"
          },
          "tagName": "my-config-omit-component",
          "customElement": true,
          "slots": [
            {
              "description": "The title of the component",
              "name": "",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The content of the component",
              "name": "content",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssProperties": [
            {
              "description": "The background color of the component",
              "name": "--my-component-background-color",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "age",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "hobby",
              "type": {
                "text": "\"sports\" | \"music\" | \"art\""
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "events": [],
          "cssStates": [
            {
              "description": "The disabled state of the component",
              "name": "disabled",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "omitCssProps": [
            {
              "name": "--my-component-color"
            }
          ],
          "omitCssParts": [
            {
              "name": "title"
            }
          ],
          "omitCssStates": [
            {
              "name": "active"
            }
          ],
          "attributes": [],
          "omitEvents": [
            {
              "name": "my-event"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Component where items are omitted from the JSDoc tags",
          "name": "MyJsDocOmitComponent",
          "superclass": {
            "name": "MyComponent",
            "module": "demo/src/my-components.ts"
          },
          "tagName": "my-jsdoc-omit-component",
          "customElement": true,
          "omit": [
            {
              "name": "age"
            }
          ],
          "omitCssParts": [
            {
              "name": "content"
            }
          ],
          "omitCssProps": [
            {
              "name": "--my-component-background-color"
            }
          ],
          "omitEvents": [
            {
              "name": "my-event"
            }
          ],
          "slots": [
            {
              "description": "The title of the component",
              "name": "",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The title of the component",
              "name": "title",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssProperties": [
            {
              "description": "The color of the component",
              "name": "--my-component-color",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "hobby",
              "type": {
                "text": "\"sports\" | \"music\" | \"art\""
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "events": [],
          "cssStates": [
            {
              "description": "The active state of the component",
              "name": "active",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "description": "The disabled state of the component",
              "name": "disabled",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "attributes": []
        },
        {
          "kind": "class",
          "description": "Component where items are omitted from the JSDoc tags",
          "name": "MyExtJsDocOmitComponent",
          "superclass": {
            "name": "MyJsDocOmitComponent",
            "module": "demo/src/my-components.ts"
          },
          "tagName": "my-ext-jsdoc-omit-component",
          "customElement": true,
          "slots": [
            {
              "description": "The title of the component",
              "name": "",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The title of the component",
              "name": "title",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "cssProperties": [
            {
              "description": "The color of the component",
              "name": "--my-component-color",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "field",
              "name": "hobby",
              "type": {
                "text": "\"sports\" | \"music\" | \"art\""
              },
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "events": [],
          "cssStates": [
            {
              "description": "The active state of the component",
              "name": "active",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            },
            {
              "description": "The disabled state of the component",
              "name": "disabled",
              "inheritedFrom": {
                "name": "MyComponent",
                "module": "demo/src/my-components.ts"
              }
            }
          ],
          "omitCssProps": [
            {
              "name": "--my-component-background-color"
            }
          ],
          "omitCssParts": [
            {
              "name": "content"
            }
          ],
          "omit": [
            {
              "name": "age"
            }
          ],
          "attributes": [],
          "omitEvents": [
            {
              "name": "my-event"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Component where items are extended form a mixin",
          "name": "MyMixinComponent",
          "mixins": [
            {
              "name": "mixinElementInternals",
              "module": "/demo/src/my-mixin"
            }
          ],
          "superclass": {
            "name": "SlAlert",
            "module": "demo/src/my-components.ts"
          },
          "tagName": "my-mixin-component",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "inheritedFrom": {
                "name": "mixinElementInternals",
                "module": "demo/src/my-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "myProp",
              "type": {
                "text": "string"
              },
              "default": "'test'",
              "inheritedFrom": {
                "name": "mixinElementInternals",
                "module": "demo/src/my-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "inheritedFrom": {
                "name": "mixinElementInternals",
                "module": "demo/src/my-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "restartAutoHide",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "pauseAutoHide",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "resumeAutoHide",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "handleCountdownChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "handleCloseClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "handleOpenChange",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "handleDurationChange",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the alert.",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the alert",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "method",
              "name": "toast",
              "description": "Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\ndismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\ncalling this method again. The returned promise will resolve after the alert is hidden.",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'sl-icon-button': SlIconButton }",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "autoHideTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "remainingTimeInterval",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "countdownAnimation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'icon', 'suffix')",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "currentToastStack",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "static": true,
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "toastStack",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "countdownElement",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can toggle this attribute to show and hide the alert, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the alert's open state.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables a close button that allows the user to dismiss the alert.",
              "attribute": "closable",
              "reflects": true,
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The alert's theme variant.",
              "attribute": "variant",
              "reflects": true,
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "duration",
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`, meaning\nthe alert will not close on its own.",
              "attribute": "duration",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "countdown",
              "type": {
                "text": "'rtl' | 'ltr' | undefined"
              },
              "description": "Enables a countdown that indicates the remaining time the alert will be displayed.\nTypically used to indicate the remaining time before a whole app refresh.",
              "attribute": "countdown",
              "reflects": true,
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "kind": "field",
              "name": "remainingTime",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            }
          ],
          "cssProperties": [],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "The container that wraps the optional icon.",
              "name": "icon",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "The container that wraps the alert's main content.",
              "name": "message",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "The close button, an `<sl-icon-button>`.",
              "name": "close-button",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "The close button's exported `base` part.",
              "name": "close-button__base",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            }
          ],
          "cssStates": [],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can toggle this attribute to show and hide the alert, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the alert's open state.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables a close button that allows the user to dismiss the alert.",
              "fieldName": "closable",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The alert's theme variant.",
              "fieldName": "variant",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "name": "duration",
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`, meaning\nthe alert will not close on its own.",
              "fieldName": "duration",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "name": "countdown",
              "type": {
                "text": "'rtl' | 'ltr' | undefined"
              },
              "description": "Enables a countdown that indicates the remaining time the alert will be displayed.\nTypically used to indicate the remaining time before a whole app refresh.",
              "fieldName": "countdown",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the alert opens.",
              "name": "sl-show",
              "reactName": "onSlShow",
              "eventName": "SlShowEvent",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "Emitted after the alert opens and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow",
              "eventName": "SlAfterShowEvent",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "Emitted when the alert closes.",
              "name": "sl-hide",
              "reactName": "onSlHide",
              "eventName": "SlHideEvent",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "Emitted after the alert closes and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide",
              "eventName": "SlAfterHideEvent",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            }
          ],
          "slots": [
            {
              "description": "The alert's main content.",
              "name": "",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            },
            {
              "description": "An icon to show in the alert. Works best with `<sl-icon>`.",
              "name": "icon",
              "inheritedFrom": {
                "name": "SlAlert"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MyComponent",
          "declaration": {
            "name": "MyComponent",
            "module": "demo/src/my-components.ts"
          }
        },
        {
          "kind": "js",
          "name": "MyExtComponent",
          "declaration": {
            "name": "MyExtComponent",
            "module": "demo/src/my-components.ts"
          }
        },
        {
          "kind": "js",
          "name": "MyConfigOmitComponent",
          "declaration": {
            "name": "MyConfigOmitComponent",
            "module": "demo/src/my-components.ts"
          }
        },
        {
          "kind": "js",
          "name": "MyJsDocOmitComponent",
          "declaration": {
            "name": "MyJsDocOmitComponent",
            "module": "demo/src/my-components.ts"
          }
        },
        {
          "kind": "js",
          "name": "MyExtJsDocOmitComponent",
          "declaration": {
            "name": "MyExtJsDocOmitComponent",
            "module": "demo/src/my-components.ts"
          }
        },
        {
          "kind": "js",
          "name": "MyMixinComponent",
          "declaration": {
            "name": "MyMixinComponent",
            "module": "demo/src/my-components.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/src/my-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "mixinElementInternals",
          "members": [
            {
              "kind": "field",
              "name": "internals",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "myProp",
              "type": {
                "text": "string"
              },
              "default": "'test'"
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private"
            }
          ],
          "parameters": [
            {
              "name": "base"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mixinElementInternals",
          "declaration": {
            "name": "mixinElementInternals",
            "module": "demo/src/my-mixin.ts"
          }
        }
      ]
    }
  ]
}
